// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PetStatus {
  AVAILABLE
  ADOPTED
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

enum PetGender {
  MALE
  FEMALE
}

enum PetSpecies {
  DOG
  CAT
  BIRD
}

enum PetAge {
  PUPPY
  ADULT
  SENIOR
}

enum PublicationStatus {
  APROVED
  REJECTED
  PENDING
}

model User {
  id            String    @id @default(uuid())
  firebaseUid   String?   @unique
  email         String    @unique
  name          String
  password      String
  city          String
  state         String
  phone         String
  role          UserRole  @default(USER)
  refresh_token String?
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime  @updatedAt @db.Timestamptz
  deletedAt     DateTime? @db.Timestamptz

  pets Pet[]
}

model Pet {
  id                 String            @id @default(uuid())
  name               String
  description        String            @db.Text
  species            PetSpecies
  age                PetAge
  size               PetSize
  gender             PetGender
  pet_status         PetStatus         @default(AVAILABLE)
  publication_status PublicationStatus @default(PENDING)
  publication_date   DateTime          @default(now()) @db.Timestamptz
  createdAt          DateTime          @default(now()) @db.Timestamptz
  updatedAt          DateTime          @updatedAt @db.Timestamptz
  deletedAt          DateTime?         @db.Timestamptz
  userId             String
  user               User              @relation(fields: [userId], references: [id])
  photos             Photo[]
}

model Photo {
  id        String    @id @default(uuid())
  url       String
  petId     String
  pet       Pet       @relation(fields: [petId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
}
